继承：
 
1. 方法的重写： 当子类通过extends继承父类时，可以重写改写父类的方法。 注意改写的方法中返回值，方法名，参数必须相同。这样调用时回优先调用子类方法。这就是方法的重写。
 2. 继承的初始化顺序：先初始化父类对象，且先执行弗雷德属性初始化，在执行构造方法，再初始化子类对象子类属性初始化，子列构造方法 。（这样做的结果会导致变量值的覆盖。 
 3.   final 关键字：final修饰类，则该类不可被继承，继承方法，方法不可以被重写。修饰变量，变量只允许一次赋值，变为常量。
 4.   super 再对象的内部使用，可以访问父类的属性和方法。要想在子类中显示的调用父类构造方法，必须放在子类构造方法第一行。 
 5.   object类是所有父类的父类，Java中没有多继承。其中的object类可以通过tostring得到一个哈希码，这是对象在内存中的地址，也可以重写tostring方法。
 6.   Object中的equeals方法，当创建一个对象时，是创建了一个对象的引用，通过这个对象可以进行操作，equeals（）方法比较的是对象的内存地址是否相同，要想比较对象的属性是否相同，可以重写equals（）
 
多态

1. 用父类的引用 指向一个本类的对象或者子类的对象。如果子类的方法不是通过父类继承的，则父类的引用指向子类对象时不可以使用子类的方法。
2. 引用类型转换，自动类型转换（打转小） 强制类型转换。强制类型转换存在一定风险，可以使用instanceof关键字判断两个引用之间是否存在相同类型（或者是否互相包含），去除风险。
3. 抽象类 父类只是指导子类包含某些方法，但不知道如何实现。是可以采用抽象类。关键字abstract 抽象类中的抽象方法没有具体实现，以分号结束。
4. 接口 ，一般用来继承和实现的，修饰一般为public 其中定义一些抽象方法和常量。 接口可以多继承。 接口的实现使用implements关键字。如果一个类要继承父类，继承的父类必须再实现接口之前。语法（class+类名+extends+父类+implements+接口1，2，3） 接口默认缺省abstract关键字。
5. UML图示。 额先放这吧。 

异常
1. 编写时注意顺序，先子类后父类 finally可以处理异常执行后需要处理的操作。
2. throw  throws 抛出异常


string 
1. 当定义一个string s1="";对象的字符串时是编译之前就已知其地址。但是 string s2=s1+" ";再运行时才知道具体值，相当于指向一个新的字符串对象。 ==用于判断字符串的地址是否相等， equals（）判断内容是否相同。


泛型
1. 泛型集合中不能添加规定类型及其子类型以外的对象
2. 泛型不能是基本数据类型。要使用基本类型的泛型，必须使用基本类型的包装类
3. 构造泛型集合常用的是List Queue Set(集合中元素不能相同）
4.  Set不能用 get方法遍历，因为Set中数据存储无序。且其中元素不可重复
5. Set中可以添加null对象，不过一般很少用到

Map接口
1. Map是一种映射关系，其中元素以键值对形式存储，可以通过key快速查找value。 键值对以Entry类型的对象实例存在。 key不可重复，value可以，即一个value可以对应多个key
2. Map支持泛型，即是key和value可以为泛型
3. 使用put方法添加键值
4. HashMap